package tk.glucodata.watchface

import android.content.Context
import android.graphics.Canvas
import android.graphics.Color.*
import android.graphics.Paint
import android.graphics.Paint.Align
import android.graphics.Path
import android.graphics.Rect
import android.view.SurfaceHolder
import androidx.core.graphics.withScale
import androidx.wear.watchface.*
import androidx.wear.watchface.complications.data.ComplicationType
import androidx.wear.watchface.complications.rendering.CanvasComplicationDrawable
import androidx.wear.watchface.complications.rendering.ComplicationDrawable
import androidx.wear.watchface.style.CurrentUserStyleRepository
import androidx.wear.watchface.style.UserStyle
import androidx.wear.watchface.style.UserStyleSetting
import androidx.wear.watchface.style.WatchFaceLayer
import kotlinx.coroutines.*
import tk.glucodata.Applic
import tk.glucodata.Applic.setscreenupdater
import tk.glucodata.Log
import tk.glucodata.Natives
import tk.glucodata.strGlucose
import tk.glucodata.watchface.data.watchface.ColorStyleIdAndResourceIds
import tk.glucodata.watchface.data.watchface.WatchFaceColorPalette.Companion.convertToWatchFaceColorPalette
import tk.glucodata.watchface.data.watchface.WatchFaceData
import tk.glucodata.watchface.utils.COLOR_STYLE_SETTING
import tk.glucodata.watchface.utils.LEFT_AND_RIGHT_COMPLICATIONS_TOP_BOUND
import tk.glucodata.watchface.utils.ratTimebaseY
import java.time.ZonedDateTime
import kotlin.math.pow
import kotlin.math.sqrt

// Default for how Long each frame is displayed at expected frame rate.
//private const val FRAME_PERIOD_MS_DEFAULT: Long = 16L
private const val FRAME_PERIOD_MS_DEFAULT: Long = 60000L

/**
 * Renders watch face via data in Room database. Also, updates watch face state based on setting
 * changes by user via [userStyleRepository.addUserStyleListener()].
 */
class WatchRenderer(
    private val context: Context,
    surfaceHolder: SurfaceHolder,
    watchState: WatchState,
    private val complicationSlotsManager: ComplicationSlotsManager,
    currentUserStyleRepository: CurrentUserStyleRepository,
    canvasType: Int
) : Renderer.CanvasRenderer(
    surfaceHolder,
    currentUserStyleRepository,
    watchState,
    canvasType,
    FRAME_PERIOD_MS_DEFAULT
) {
    private val scope: CoroutineScope =
        CoroutineScope(SupervisorJob() + Dispatchers.Main.immediate)

    // Represents all data needed to render the watch face. All value defaults are constants. Only
    // three values are changeable by the user (color scheme, ticks being rendered, and length of
    // the minute arm). Those dynamic values are saved in the watch face APIs and we update those
    // here (in the renderer) through a Kotlin Flow.
    private var watchFaceData: WatchFaceData = WatchFaceData()

    // Converts resource ids into Colors and ComplicationDrawable.
    private var watchFaceColors = convertToWatchFaceColorPalette(
        context,
        watchFaceData.activeColorStyle,
        watchFaceData.ambientColorStyle
    )

    // Initializes paint object for painting the clock hands with default values.


    // Used to paint the main hour hand text with the hour pips, i.e., 3, 6, 9, and 12 o'clock.
    
    private val glucosePaint = Paint().apply {
        isAntiAlias = true
        textAlign = Align.CENTER
        color = WHITE
    }
    private val agePaint = Paint().apply {
        setARGB(0xFF,0xFF,0,0xFF)
       }


    // Default size of watch face drawing area, that is, a no size rectangle. Will be replaced with
    // valid dimensions from the system.

    init {
        scope.launch {
            currentUserStyleRepository.userStyle.collect { userStyle -> updateWatchFaceData(userStyle) }
        }
	/*
	setscreenupdater( {
        Applic.RunOnUiThread({
			Log.i(LOG_ID,"invalidate")
			this.invalidate() } )})*/
	setscreenupdater {
        Log.i(LOG_ID, "postInvalidate")
        this.postInvalidate()
    }


    }

    /*
     * Triggered when the user makes changes to the watch face through the settings activity. The
     * function is called by a flow.
     */
    private fun updateWatchFaceData(userStyle: UserStyle) {
        Log.d(LOG_ID, "updateWatchFace(): $userStyle")

        var newWatchFaceData: WatchFaceData=watchFaceData 
        // Loops through user style and applies new values to watchFaceData.
        for(options in userStyle) {
            when(options.key.id.toString()) {
                COLOR_STYLE_SETTING -> {
                    val listOption = options.value as UserStyleSetting.ListUserStyleSetting.ListOption
                    newWatchFaceData = newWatchFaceData.copy( activeColorStyle = ColorStyleIdAndResourceIds.getColorStyleConfig( listOption.id.toString()))
                    }
            }
        }
	if( watchFaceData != newWatchFaceData) {
            watchFaceData = newWatchFaceData

            // Recreates Color and ComplicationDrawable from resource ids.
            watchFaceColors = convertToWatchFaceColorPalette(
                context,
                watchFaceData.activeColorStyle,
                watchFaceData.ambientColorStyle
            )

            // Applies the user chosen complication color scheme changes. ComplicationDrawables for
            // each of the styles are defined in XML so we need to replace the complication's
            // drawables.
            for ((_, complication) in complicationSlotsManager.complicationSlots) {
                ComplicationDrawable.getDrawable( context, watchFaceColors.complicationStyleDrawableId)?.let { 
		        it.activeStyle.borderColor= TRANSPARENT
                        it.ambientStyle.borderColor= TRANSPARENT
		        (complication.renderer as CanvasComplicationDrawable).drawable = it
                }
            }
        }
    }

    override fun onDestroy() {
	setscreenupdater(null);
        Log.d(LOG_ID, "onDestroy()")
        scope.cancel("WatchRenderer scope clear() request")
        super.onDestroy()
    }

    override fun renderHighlightLayer(canvas: Canvas, bounds: Rect, zonedDateTime: ZonedDateTime) {
        Log.d(LOG_ID,"renderHighlightLayer")

        canvas.drawColor(BLACK)

        for((_, complication) in complicationSlotsManager.complicationSlots) {
            if(complication.enabled) {
                complication.renderHighlightLayer(canvas, zonedDateTime, renderParameters)
            }
        }
    }
                      
    override fun render(canvas: Canvas, bounds: Rect, zonedDateTime: ZonedDateTime) {
    Log.i(LOG_ID, "render");

        canvas.drawColor(BLACK)
        drawComplications(canvas, zonedDateTime)

        if(renderParameters.watchFaceLayers.contains(WatchFaceLayer.COMPLICATIONS_OVERLAY)) {
            val unixtime = zonedDateTime.toEpochSecond()
            val glucose: strGlucose? = Natives.lastglucose()

           /* canvas.withScale(
                x = WATCH_HAND_SCALE,
                y = WATCH_HAND_SCALE,
                pivotX = bounds.exactCenterX(),
                pivotY = bounds.exactCenterY()
            ) */
            with(canvas){
                val drawAmbient = renderParameters.drawMode == DrawMode.AMBIENT
                if (drawAmbient) {
                    timePaint.color = watchFaceColors.ambientPrimaryColor
                      glucosePaint.color = watchFaceColors.ambientPrimaryColor
                    agePaint.color = GRAY
                }
            else {
                    timePaint.color = watchFaceColors.activePrimaryColor
                    glucosePaint.color = watchFaceColors.activePrimaryColor
                    agePaint.setARGB(0xFF, 0xFF, 0, 0xFF)
                }


                glucosePaint.textSize =height*.25f
		val timey= height*ratTimebaseY

		val localtime= zonedDateTime.toLocalTime()
		if(Applic.hour24) {
			val timex= width*0.49f
                	timePaint.textSize =height*.25f
                	drawText(String.format("%02d:%02d",localtime.getHour(),localtime.getMinute()),timex,timey, timePaint)
			}
		else  {
			val timex= width*0.71f
			val hour=localtime.getHour();
			val daypart=if(hour>=12) "pm" else "am"
			var hour12=hour%12
			if(hour12==0)
				hour12=12;
                	timePaint.textSize =height*.22f
                    timePaint.setTextAlign(Align.RIGHT)
                    drawText(String.format("%d:%02d",hour12,localtime.getMinute()),timex,timey, timePaint)
                	timePaint.textSize *=0.4f
        		    timePaint.setTextAlign(Align.LEFT)
                	drawText(daypart,timex,timey, timePaint)
                        timePaint.setTextAlign(Align.CENTER)
			}
                if(glucose!=null) {
		    Log.i(LOG_ID,"glucose=${glucose.value} time=${glucose.time}")
		     var age:Int=(unixtime-glucose.time).toInt()
		     val oldage=(60.0f*3.0f)
		   if(age<oldage) {
			    if(age<0) age=0
			    var getx= width*0.5f
			    val gety= height*(LEFT_AND_RIGHT_COMPLICATIONS_TOP_BOUND-0.085f)
			   val rate=glucose.rate
				if(rate.isNaN()) {
					getx=width*0.45f
					}
				else  {
				   val density=canvas.height/250.0
				    drawarrow(this,density,rate,width*.25f,height*.55f)
				    }
			    drawText(glucose.value,getx,gety, glucosePaint)
			    val idbounds=Rect()
			    glucosePaint.textSize/=5.0f
			    val sensorid=glucose.sensorid
			    glucosePaint.getTextBounds(sensorid, 0,sensorid.length, idbounds)
			    val yid= gety+idbounds.height()*1.5f
			    val wid= idbounds.width()
			    val relage=age*wid/oldage
			    val xage= getx-wid*.5f
			    val hid= idbounds.height()
			    drawRect( xage,yid-hid*1.05f,xage +relage, yid+0.07f*hid,agePaint)
			    drawText(sensorid,getx,yid, glucosePaint)
		 	}
		else {
			Log.i(LOG_ID,"age ($age) >= oldage ($oldage)")
			}
			}
		else
		   	Log.i(LOG_ID,"glucose==null")

	 	}
            }
    }
    private fun isActive(slot:ComplicationSlot ): Boolean {
        return when (slot.complicationData.value.type) {
            ComplicationType.NO_DATA -> false
            ComplicationType.NO_PERMISSION -> false
            ComplicationType.EMPTY -> false
            else -> true
        }
    }

    // ----- All drawing functions -----
    private fun drawComplications(canvas: Canvas, zonedDateTime: ZonedDateTime) {
        for ((_, complication) in complicationSlotsManager.complicationSlots) {
            if(isActive(complication)) {
                complication.render(canvas, zonedDateTime, renderParameters)
            }
        }
    }



    companion object {
        private const val LOG_ID = "WatchRenderer"

private inline fun glnearnull(rate:Float):Boolean = (rate<.8f&&rate>-.8f)

@JvmStatic
 fun drawarrow(canvas: Canvas,density:Float, ratein:Float, getx:Float, gety:Float):Boolean {
	if(!ratein.isNaN()) {
		val rate= if(glnearnull(ratein)) .0f else ratein
		val x1:Double= (getx-density*40.0)
		val y1:Double= (gety+rate*density*30.0)

		var rx: Double=getx-x1
		var ry:Double=gety-y1
		val rlen= sqrt(rx.pow(2.0) + ry.pow(2.0))
		 rx/=rlen
		 ry/=rlen

		val l:Double=density*12.0;

		val addx= l* rx;
		val addy= l* ry;
		val tx1=getx-2*addx;
		val ty1=gety-2*addy;
		val xtus:Float= (getx-1.5*addx).toFloat();
		val ytus:Float= (gety-1.5*addy).toFloat();
		val hx=ry;
		val hy=-rx;
		val sx1:Float= (tx1+l*hx).toFloat();
		val sy1:Float= (ty1+l*hy).toFloat();
		val sx2:Float = (tx1-l*hx).toFloat();
		val sy2:Float= (ty1-l*hy).toFloat();
        timePaint.strokeWidth = density.toFloat()*5.0f
	    canvas.drawLine(x1.toFloat(), y1.toFloat(), xtus, ytus,timePaint)
		canvas.drawPath(Path().apply {
			moveTo(sx1,sy1) ;
			lineTo(getx,gety);
			lineTo(sx2,sy2);
			lineTo( xtus,ytus);
            close()
			},timePaint)
           return true
		}
    return false
}

    private val timePaint = Paint().apply {
        isAntiAlias = true
        textAlign = Align.CENTER
        color = WHITE
    }
    }
}

//#if defined(LIBRE3) && !defined(NDEBUG)
//#define HOOKS
//#endif
    #undef  _GNU_SOURCE
    #define _GNU_SOURCE
       #include <link.h>
#include <dlfcn.h>
  #include <math.h>
  #include <stdio.h>
  #include <stdlib.h>
         #include <unistd.h>
	   #include <string.h>
       #include <sys/types.h>
       #include <sys/stat.h>
       #include <fcntl.h>
#include <sys/syscall.h>   /* For SYS_xxx definitions */
#include <string_view>
#include <ctype.h>
       #include  <algorithm>

       #ifdef __ANDROID__
#include <android/log.h>
#endif
#include <stdarg.h>
//#include <type_traits>

#include "logs.h"
#define logM(...)

#if __ANDROID_API__ >= 24
#define useddlvsym(handle,symbol,x) dlvsym(handle,symbol,x)
#define usedlsym(handle,name) useddlvsym(handle,name,nullptr)
#else
#define useddlvsym(handle,symbol,x) dlsym(handle,symbol)
#define usedlsym(handle,name) dlsym(handle,name)
#endif

//#define loggert printf
#define VISIBLE __attribute__((__visibility__("default")))
extern "C" int  VISIBLE dl_iterate_phdr( int (*callback) (struct dl_phdr_info *info, size_t size, void *data), void *data) ;
struct dl_data { 
	int (*callback) (struct dl_phdr_info *info, size_t size, void *data);
	void *data;
	};
/*
static int callbackhook(struct dl_phdr_info *info, size_t size, void *data) {
	struct dl_data *gegs= (struct dl_data *)data;
	if(info->dlpi_name)
		loggert("lib: %s\n",info->dlpi_name);
	else
		loggert("lib: null\n");

	if(!info->dlpi_name||!strstr(info->dlpi_name,"jnisub")) {
		return gegs->callback(info,size,data);
		}
	return 0;
	}
*/
/*79  newfstatat              man/ cs/  0x4f  int dfd           const char          struct stat         int flag            -                 -          
                                                              *filename           *statbuf            
                                                              struct                                                                                   */
/*int stat(const char *pathname, struct stat *statbuf) {
//	typedef   size_t (*stattype)(const char *pathname, struct stat *statbuf) ;
//	static stattype realstat=(stattype)useddlvsym(RTLD_NEXT, "stat",nullptr);
	int ret= sys_stat(pathname,statbuf);
//	int ret= realstat(pathname,statbuf);
	loggert("stat(%s)=%d\n",pathname,ret);
	return ret;
	}
extern "C" int VISIBLE dl_iterate_phdr( int (*callback) (struct dl_phdr_info *info, size_t size, void *data), void *data) {
	typedef int (*dl_iterate_phdrtype)( int (*callback) (struct dl_phdr_info *info, size_t size, void *data), void *data);
	static dl_iterate_phdrtype realdl_iterate_phdr=NULL;
	if(!realdl_iterate_phdr)
		realdl_iterate_phdr=(dl_iterate_phdrtype)useddlvsym(RTLD_NEXT, "dl_iterate_phdr",nullptr);
	
	if(!realdl_iterate_phdr) {
		loggert("dlsym(RTLD_NEXT, dl_iterate_phdr) failed\n");
		return -1;
		}
	struct dl_data *gegs=(struct dl_data *)malloc(sizeof(struct dl_data));
	gegs->callback=callback;
	gegs->data=data;
	return realdl_iterate_phdr(callbackhook,gegs);
	}
	
*/
	
extern const char *package;
extern int packagelen;
/*
VISIBLE extern "C" int execv(const char *pathname, char *const argv[])  {

	LOGGER("%d %d no execv(%s, {",getpid(),gettid(),pathname);
	for(char *const *ptr=argv;*ptr;ptr++ ) {
		LOGGER("%s,",*ptr);
		}
	LOGGER("})\n");
	#ifndef	USE_ECHO
//	const char package[]="package:/sdcard/libre/base.apk\n";
	sys_write(STDOUT_FILENO,package,packagelen);
//	puts("package:/sdcard/libre/base.apk");
//	fflush(stdout);
	sys_exit(0);
	return 0;
	#else
  	const char prog[]="/system/bin/echo";
        return execl(prog, prog, "package:/sdcard/libre/base.apk",NULL); //werkt
	#endif
	}
	
VISIBLE extern "C" double Pow(double x, double y) {
       double res= pow(x,y);
       logM("pow(%lf,%lf)=%lf\n",x,y,res);
       return res;
       }

VISIBLE extern "C" double Ldexp(double x, int exp) {
       double res= ldexp(x,exp);
       logM("ldexp(%lf,%d)=%lf\n",x,exp,res);
       return res;
       }
VISIBLE extern "C" long int Lround(double x) {
	long int res=lround(x);
	logM("lround(%lf)=%ld\n",x,res);
	return res;
	}
VISIBLE extern "C" char *Strdup(const char *s) {

#ifdef SAVE_MEMCPY
	filenr=0;
	#endif
	LOGGER("strdup(%s)\n",s);
	return strdup(s);
	}

VISIBLE extern "C" double Log(double x) {
	double res=log(x);
	logM("log(%lf)=%lf\n",x,res);
	return res;
	}
	*/

/*
extern "C"  FILE VISIBLE * fopen(const char *pathname, const char *mode) {
	typedef   FILE *(*fopentype)(const char *pathname, const char *mode) ;
	static  fopentype realfopen= (fopentype)useddlvsym(RTLD_NEXT, "fopen",nullptr);
	 auto ret=realfopen(pathname,mode);	
	LOGGER("fopen(%s,%s)=%p\n",pathname,mode,ret);
	return ret;
	}
	
extern "C" void VISIBLE syslog(int priority, const char *format, ...) {
        va_list args;
        va_start(args, format);
//	vsyslog(priority, format, args);
	loggert("syslog: ");
	vloggert(format,args);
        va_end(args);
	}


extern "C"     size_t VISIBLE fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) {
	typedef   size_t (*fwritetype)(const void *ptr, size_t size, size_t nmemb, FILE *stream) ;
	static fwritetype realfwrite= (fwritetype)useddlvsym(RTLD_NEXT, "fwrite",nullptr);
	size_t ret=realfwrite(ptr, size, nmemb, stream) ;
	LOGGER("fwrite(%zd,%zd,%p)=%zd\n",size, nmemb, stream,ret) ;
	return ret;
	}
	
VISIBLE extern "C" int open(const char* __path, int __flags, ...) {
#define realopen sys_opener
	if(O_RDONLY&& __flags) {
		int ret=realopen(__path,__flags);
		LOGGER("open(%s,%x)=%d\n", __path,  __flags, ret);
		return ret;
		}
        va_list args;
        va_start(args, __flags);
	mode_t mode=va_arg(args,int);
        va_end(args);
	int ret=realopen(__path,__flags,mode);
	LOGGER("open(%s,%x,%x)=%d\n", __path,  __flags, mode,ret);
	return ret;
	}
	*/
	/*
extern "C"  VISIBLE  void * __memmove_chk(void * dest, const void * src, size_t len, size_t destlen) ;
extern "C"  VISIBLE  void * __Memmove_chk(void * dest, const void * src, size_t len, size_t destlen) {
        void *res= __memmove_chk(dest,src,len,destlen);
        const char *srcstr=(const char *)src;
        LOGGER("__memmove_chk(%p,%.20s %s@%p,%zu,%zu)=%p\n",dest,isprint(srcstr[0])?srcstr:"",len==0?"":Showhex(src,std::min((int)len,20)).data,src,len,destlen,res);
        return res;
        }*/

/*
extern "C"       ssize_t VISIBLE read(int fd, void *buf, size_t count) {
	auto ret=sys_read(fd,buf,count);
	constexpr const int pos=20;
	char *chp=((char *)buf)+pos;
	char tmp=*chp;
	*chp='\0';
	LOGGER("read(%d,%s,%zd)=%zd\n",fd,(char *)buf,count,ret);
	*chp=tmp;
	return ret;
	}

void syslogger( const char* fmt, ...) {
        va_list args;
        va_start(args, fmt);
    	vsyslog(LOG_USER, fmt, args);
        va_end(args);
	}
*/
#ifndef NDEBUG
#if __ANDROID_API__ >= 24
 extern "C" void  VISIBLE *dlsym(void *handle, const char *symbol) {
  	void *ret=useddlvsym(handle,symbol,nullptr);
	loggert( "dlsym(%p,%s)=%p\n",handle,symbol,ret );
	return ret;
  	}
#endif
#endif
	
	/*
  VISIBLE extern "C" void *dlsym(void *handle, const char *symbol) {
  static int fp=-1;
  static int iter=0;
  if(fp==-1) {
  	  const char start[]="start\n";
	  fp=sys_opener( "/sdcard/newlog.txt",O_APPEND|O_CREAT|O_WRONLY, S_IRUSR |S_IWUSR);
		sys_write(fp,start,sizeof(start)-1);
		}
	iter++;
  	void *ret=useddlvsym(handle,symbol,nullptr);
	loggert( "dlsym(%p,%s)=%p\n",handle,symbol,ret );
	
	if(fp!=-1) {
		const char nl[]="\n";
		sys_write(fp,symbol,strlen(symbol));
		sys_write(fp,nl,sizeof(nl)-1);
		}
	return ret;
  	}
*/	
	/*
VISIBLE extern "C" void *Memcpy(void *dest, const void *src, size_t n) {
#ifdef SAVE_MEMCPY
  	if(filenr<10) { 
//	if(filenr<10) {
		#define BUGSTART FILEDIR "data"
		char base[256]=BUGSTART;
		sprintf(base+sizeof(BUGSTART)-1,"%d",filenr++);
		int file=creat(base,0644);

//		int file=    open(filename,O_WRONLY|O_CREAT, S_IRUSR | S_IWUSR );
		LOGGER("save to %s: ",base);
		if(file<0) {
			LOGGER("Can't create %s\n",base);
				}
		else {
			write(file,src,n);
			close(file);	
			}
		}
	LOGGER("memcpy(,%.*s,%zd)\n",(int)n,src,n);
#endif
	return memcpy(dest,src,n);
	}

//TODO uncomment

extern "C" int VISIBLE __android_log_print(int prio, const char* tag, const char* fmt, ...) __attribute__((__format__(printf, 3, 4)));
extern "C" int VISIBLE __android_log_write(int prio, const char* tag, const char* text) ;

extern "C" int VISIBLE __android_log_write(int prio, const char* tag, const char* text) {
	return loggert("#%s: %s\n",tag,text);
	}
//int get= __android_log_print(ANDROID_LOG_INFO,"Glucose","Hooks startup");
extern "C" int VISIBLE __android_log_print(int prio, const char* tag, const char* fmt, ...) {
        va_list args;
	int res=loggert("#%s: ",tag);
        va_start(args, fmt);
	res+=vloggert(fmt,args);
	loggert("\n");
//	int res=  __android_log_vprint(prio, tag, fmt, args);
        va_end(args);
	return res;
	}


VISIBLE extern "C" pid_t waitpid(pid_t pid, int *wstatus, int options) {
  	static waitpid_t wp=(waitpid_t)useddlvsym(RTLD_NEXT,"waitpid",nullptr);
	pid_t ret=wp(pid,wstatus,options);
	LOGGER("waitpid(%d,%d,%d)=%d\n",pid,wstatus?*wstatus:-1,options,ret);
	return ret;
	}
*/
#define NOFORK
#ifdef NOFORK
static constexpr const pid_t childpid=9815123;
#endif
extern "C" pid_t VISIBLE waitpid(pid_t pid, int *wstatus, int options) {
#ifdef NOFORK
	if(pid==childpid)  { 
		
		LOGGER("waitpid\n");
		if(wstatus)
			*wstatus=0;
		return childpid;
	}
	else 
#endif
	{
	
	//	typedef pid_t (*waitpid_t)(pid_t pid, int *wstatus, int options);
	//	static waitpid_t wp=(waitpid_t)useddlvsym(RTLD_NEXT,"waitpid",nullptr);
		pid_t ret=sys_wait4(pid,wstatus,options,nullptr);
		LOGGER("waitpid(%d,%d,%d)=%d\n",pid,wstatus?*wstatus:-1,options,ret);
		return ret;
		}
	}
/*(
VISIBLE extern "C" pid_t  fork(void) {
	typedef pid_t (*fork_t)(void);
  	static fork_t fo=(fork_t)useddlvsym(RTLD_NEXT,"fork",nullptr);
	pid_t pid=fo();
	LOGGER("fork()=%d\n",pid);
	return pid;
	}
*/

//static int *checkpipe=nullptr;
#ifdef NOFORK
extern "C" pid_t  VISIBLE fork(void) {
	LOGGER("nepfork()\n");
	return childpid;
	}

extern "C" int  VISIBLE pipe(int pipefd[2]) {
//	typedef  int (*pipe_t)(int [2]); static pipe_t pi=(pipe_t)useddlvsym(RTLD_NEXT,"pipe",nullptr); int  ret=pi(pipefd);
	int ret=sys_pipe2(pipefd,0);
	LOGGER("pipe({%d,%d})=%d\n",pipefd[0],pipefd[1],ret);
        sys_write(pipefd[1],package,packagelen);
	return ret;	
	}

/*
VISIBLE extern "C" int dup2(int oldfd, int newfd) {
	typedef	 int (*dup2_t)(int oldfd, int newfd);
  	static dup2_t du=(dup2_t)useddlvsym(RTLD_NEXT,"dup2",nullptr);
	int ret=du(oldfd,newfd);
	LOGGER("dup2(%d,%d)=%d\n",oldfd,newfd,ret);
	return ret;
	}
	*/

#ifdef HOOKS

VISIBLE extern "C" int Memcmp(const void *s1, const void *s2, size_t n) {
#ifdef SHOW_MEMCMP
	static int iter=0;
	static size_t nwas=-1;
	static int grens=20;
	if(n==nwas) {
	  
	   if(

#ifdef SAVE_MEMCPY
	   filenr<10||
	   #endif
	   iter<2||(iter%grens)==0) {
		unsigned short *els=(unsigned short *)s1;
//		LOGGER("memcmp(%hx%hx%hx,%zd)\n",els[0],els[1],els[2],n);
		LOGGER("memcmp(%.*s,%zd)\n",(int)n,(const char *)s1,n);
		grens*=2;
		}
		iter++;
		}
	else {
		nwas=n;
		iter=1;
		grens=20;
		LOGGER("memcmp(%.*s,%zd)\n",(int)n,(const char *)s1,n);
		}
#endif
	LOGGER("memcmp(%.*s,%zd)\n",(int)n,(const char *)s1,n);
	return memcmp(s1,s2,n);
	}

extern "C"     size_t VISIBLE Fread(void *ptr, size_t size, size_t nmemb, FILE *stream) {
	typedef   size_t (*freadtype)(void *ptr, size_t size, size_t nmemb, FILE *stream) ;
	static freadtype realfread= (freadtype)useddlvsym(RTLD_NEXT, "fread",nullptr);
	size_t ret=realfread(ptr, size, nmemb, stream) ;
	constexpr const int pos=20;
	char *chp=((char *)ptr)+pos;
	char tmp=*chp;
	*chp='\0';
	LOGGER("fread(%s,%zd,%zd,%p)=%zd\n",(char *)ptr, size, nmemb, stream,ret) ;
	*chp=tmp;
	return ret;
	}
extern "C"   VISIBLE     int Strcmp(const char *s1, const char *s2) {
         int res=strcmp(s1, s2) ;
        LOGGER("strcmp(%s,%s)=%d\n",s1,s2,res);
        return res;
        }
extern "C"   VISIBLE   int Strncmp(const char *s1, const char *s2, size_t n) {
         int res=strncmp(s1, s2,n) ;
        LOGGER("strncmp(%s,%s,%zu)=%d\n",s1,s2,n,res);
        return res;
        }
#define restrict
extern "C"   VISIBLE   char *strcpy(char *restrict dest, const char *restrict src) {
         char * res=strcpy(dest, src) ;
        LOGGER("strcpy(%s,%s)\n",dest,src);
        return res;
        }
extern "C"   VISIBLE   char *strncpy(char *restrict dest, const char *restrict src, size_t n) {
        char* res=strncpy(dest, src,n) ;
        LOGGER("strncmp(%s,%s,%zu)\n",dest,src,n);
        return res;
        }
extern "C"   VISIBLE  int Strncasecmp(const char *s1, const char *s2, size_t n) {
        int res=strncasecmp(s1, s2, n) ;
        LOGGER("strncasecmp(%s, %s, %zu)=%d\n",s1,s2,n,res);
        return res;
        }

int showhex(uint8_t *input,int len,char *output) {
	if(!input) {
		const int lennull=std::min(4,len*2);
		memcpy(output,"null",lennull+1);
		return lennull;
		}
	char *ptr=output;
	for(int i=0;i<len;i++) {
		ptr+=sprintf(ptr,"%02X",input[i]);
		}	
	return ptr-output;
	}
struct Showhex {
	int uitlen;
	char *data;	
	Showhex(const void *input,int len):uitlen(len*2),data(new char[uitlen+1]) {
		uitlen=showhex((uint8_t*)input,len,data);
		}
	operator const char *() const {
		return data;
		}
	int size() const {
		return uitlen;
		}
	};
extern "C"  VISIBLE char * __strcpy_chk(char * dest, const char * src, size_t destlen);
extern "C"  VISIBLE char * __Strcpy_chk(char * dest, const char * src, size_t destlen) {
        char *res= __strcpy_chk(dest,src,destlen);
        const char *srcstr=(const char *)src;
        LOGGER("__strcpy_chk(%p,%.20s %s@%p,%zu)=%p\n",dest,isprint(srcstr[0])?srcstr:"",destlen==0?"":Showhex(src,std::min((int)destlen,20)).data,src,destlen,res);
        return res;
	}
extern "C"  VISIBLE char *strcpy(char *restrict dest, const char *src);

extern "C"  VISIBLE char *Strcpy(char *restrict dest, const char *src) {
        char *res= strcpy(dest,src);
			LOGGER("strcpy(..,%s)\n",src);
        return res;
	}
extern "C"  VISIBLE  int fClose(FILE *stream) {
	int res=fclose(stream);
	LOGGER("fclose(%p)=%d\n",stream,res);
	return res;
	}

       #include <syslog.h>

extern "C"  VISIBLE void Closelog(void) {
	LOGGER("closelog()\n");
	closelog();
	}
extern "C"  VISIBLE int Close(int fildes) {
	LOGGER("close(%d)\n",fildes);
	int res=close(fildes);
	return res;
	}

extern "C"  VISIBLE  void * __memcpy_chk(void * dest, const void * src, size_t len, size_t destlen) ;
extern "C"  VISIBLE  void * __Memcpy_chk(void * dest, const void * src, size_t len, size_t destlen) {
        void *res= __memcpy_chk(dest,src,len,destlen);
        const char *srcstr=(const char *)src;
        LOGGER("__memcpy_chk(%p,%.20s %s@%p,%zu,%zu)=%p\n",dest,isprint(srcstr[0])?srcstr:"",len==0?"":Showhex(src,std::min((int)len,20)).data,src,len,destlen,res);
        return res;
        }
extern "C"  VISIBLE ssize_t __read_chk(int fd, void * buf, size_t nbytes, size_t buflen);
extern "C"  VISIBLE  ssize_t __Read_chk(int fd, void * buf, size_t nbytes, size_t buflen) {
	 ssize_t res=__read_chk(fd,  buf, nbytes, buflen);
	LOGGER("__read_chk(%d,%s,%zu,%zu)=%zu\n",fd,(const char *)buf,nbytes,buflen,res);
	return res;
	}

extern "C" VISIBLE void *Memcpy(void *dest, const void *src, size_t n) {
	LOGGER("memcpy(,%.*s,%zd)\n",(int)n,(const char *)src,n);
	return memcpy(dest,src,n);
	}
extern bool initcals();

static const char *owerjslkdfjlsdQQ(void) {
    Dl_info dl_info;
    dladdr((void*)owerjslkdfjlsdQQ, &dl_info);
    return(dl_info.dli_fname);
}
const char *hookname=owerjslkdfjlsdQQ();
#include "maximum.h"
extern const int callmax2;
const int callmax2=std::max(callmax,292);
#ifdef NDEBUGCLONE
extern const char *syscallstr[callmax2];
const char *syscallstr[callmax2];
#else
extern std::string_view syscallstr[callmax];
#endif
int syscallargnr[callmax2];
extern int syscallargnr[];
bool initcals() {
	LOGGER("start initcals %s\n",hookname);
	#include "sysnums.h"
#ifdef NDEBUGCLONE
	#include "syscallstr.h"
	#endif
#if defined(__aarch64__) 
	LOGGER("end initcals %s-%d %s-%d\n",syscallstr[__NR_gettid].data(),syscallargnr[__NR_gettid],syscallstr[__NR_getrandom].data(),syscallargnr[__NR_getrandom]);
#endif
	return true;
	}

bool initers=initcals();

//extern const char *syscallstr[];
#define realsyscall syscall

extern "C"  VISIBLE void *Memmove(void *dest, const void *src, size_t n) {
	LOGGER("memmove(dest,%s,%d)\n",(char *)src,n);
	void *res=memmove(dest,src,n);
	return  res;
	}
extern const int callmax2;
extern "C" VISIBLE long Syscall(long number, ...) {
	LOGGER("start syscall\n");
	/*
	typedef   size_t (*realsyscall_t)(long,...) ;
	static realsyscall_t realsyscall= (realsyscall_t)useddlvsym(RTLD_NEXT, "syscall",nullptr);
	if(!realsyscall) {
		LOGGER("dlsvsym syscall failed\n");
		exit(4);
		}*/
	int arnr=syscallargnr[number];
	long args[6];
	va_list va;
	va_start(va,number);
	for(int i=0;i<arnr;i++)
		 args[i]=va_arg(va,long);
	va_end(va);
	long ret;
	switch(arnr) {
		case 0: ret=realsyscall(number);break;
		case 1:  {
			ret=realsyscall(number,args[0]);
			};break;
		case 2:  {
			ret=realsyscall(number,args[0],args[1]);
			};break;
		case 3:  {
			if(number==__NR_getrandom) {
				int len=args[1];
				uint8_t *ptr=reinterpret_cast<uint8_t*>(args[0]);
				memset(ptr,'\0',len);
				LOGGER("syscall %ld: %s(..)=%d zeroed\n",number,syscallstr[(int)number].data(),len);
				return len;
				}
			else
				ret=realsyscall(number,args[0],args[1],args[2]);
			};break;
		case 4:  {
			ret=realsyscall(number,args[0],args[1],args[2],args[3]);
			};break;
		case 5:  {
			ret=realsyscall(number,args[0],args[1],args[2],args[3],args[4]);
			};break;
		case 6:  {
			ret=realsyscall(number,args[0],args[1],args[2],args[3],args[4],args[5]);
			};break;
		};
	
	LOGGER("syscall %ld: %s(..)=%ld\n",number,(number<callmax2)?syscallstr[(int)number].data():"unknown",ret);
	return ret;
	}

extern "C" int myexecve(const char *pathname, char *const argv[], char *const envp[]) {
	constexpr const int maxbuf=1024;
	char buf[maxbuf];
	int start=strlen(pathname);
	memcpy(buf,pathname,start);
	for(char *const *ptr=argv;*ptr;ptr++) {
		buf[start++]=' ';
		int len=strlen(*ptr);
		memcpy(buf+start,*ptr,len);
		start+=len;
		}
	buf[start]='\0';
	LOGGER("myexecve(%s)",buf);		
	return execve(pathname,argv,envp);
	}
  #include <string.h>
extern "C" size_t mystrlen(const char *s) {
	LOGGER("strlen(%s)\n",s);
	return strlen(s);
	}
#include <dirent.h>

extern "C" DIR *myopendir(const char *name) {
	LOGGER("myopendir(%s)\n",name);
	return opendir(name);
	}

extern "C" char *mystrcpy(char *dest, const char *src) {
	LOGGER("mystrcpy(,%s)\n",src);
	return strcpy(dest,src);
	}

    #include <spawn.h>
extern "C" int (*posix_spawn)(pid_t *pid, const char *path, const posix_spawn_file_actions_t *file_actions, const posix_spawnattr_t *attrp, char *const argv[], char *const envp[]);
int (*posix_spawn)(pid_t *pid, const char *path, const posix_spawn_file_actions_t *file_actions, const posix_spawnattr_t *attrp, char *const argv[], char *const envp[]);
extern "C" int myposix_spawn(pid_t *pid, const char *path, const posix_spawn_file_actions_t *file_actions, const posix_spawnattr_t *attrp, char *const argv[], char *const envp[]) {
	int res=posix_spawn(pid, path, file_actions, attrp, argv,  envp);
	LOGGER("posix_spawn(%d,%s,,%s)=%d\n",*pid,path,*argv?*argv:"null",res);
	return res;
	}

#include <signal.h>
typedef void (*sighandler_t)(int);
extern "C" sighandler_t mysignal(int signum, sighandler_t handler) ;
sighandler_t mysignal(int signum, sighandler_t handler) {
       		LOGGER("mysignal(%d,%p)\n",signum,handler);
		return signal(signum,handler);
       		}
extern "C"
FILE *myfopen(const char *pathname, const char *mode) {
	LOGGER("myfopen(%s,%s)\n",pathname,mode);
	return fopen(pathname, mode);
	}
extern "C" ssize_t myread(int fd, void *buf, size_t count) {
	auto res=read(fd, buf, count);
	LOGGER("myread(%d,%s,%zd)=%zd\n",fd,(char *)buf,count,res);
	return res;
	}

//extern "C" int fstatat(int dirfd, const char *pathname, struct stat *statbuf, int flags);
extern "C" int myfstatat(int dirfd, const char *pathname, struct stat *statbuf, int flags) {
	int res=fstatat(dirfd, pathname, statbuf, flags);
	LOGGER("fstatat(%d, %s, statbuf, %d)=%d\n",dirfd,pathname,flags,res);
	return res;
	}

extern "C" size_t mystrlen(const char *s) ;
extern "C" int (*posix_spawn)(pid_t *pid, const char *path, const posix_spawn_file_actions_t *file_actions, const posix_spawnattr_t *attrp, char *const argv[], char *const envp[]);
extern "C" int myposix_spawn(pid_t *pid, const char *path, const posix_spawn_file_actions_t *file_actions, const posix_spawnattr_t *attrp, char *const argv[], char *const envp[]) ;
extern "C" int myexecve(const char *pathname, char *const argv[], char *const envp[]) ;
extern "C" FILE *myfopen(const char *pathname, const char *mode) ;
extern "C" ssize_t myread(int fd, void *buf, size_t count);
extern "C" sighandler_t mysignal(int signum, sighandler_t handler) ;
extern "C" int myfstatat(int dirfd, const char *pathname, struct stat *statbuf, int flags);
//	s/^.*strcmp(symbol,\(\"[a-z]*\"\).*void*..\([^;]*\);.*$/{\1,(void*)\2},/g

extern "C"  int myopen(const char *pathname, int flags, mode_t mode);
extern "C"    int myopen(const char *pathname, int flags, mode_t mode) {
       int res=open(pathname,flags,mode);
       LOGGER("dlsym open(%s,%d,)=%d\n",pathname,flags,res);
	return res;
	}

extern "C" char *mystrcpy(char *dest, const char *src) ;

//extern "C" void *myopendir(const char *name);
extern "C" void *Dlsym(void *handle, const char *symbol) {
	static const constexpr	std::pair<std::string_view,void *> funcs[]= {
		{"execve",(void*)myexecve},
		{"fopen",(void*)myfopen},
		{"fstatat", (void*) myfstatat},
		{"open",(void*)myopen},
		{"opendir",(void*)myopendir},
		{"read",(void*)myread},
		{"signal",(void*)mysignal},
		{"strcpy",(void*)mystrcpy},
		{"strlen",(void*)mystrlen}
	};
	static const constexpr	std::pair<std::string_view,void *> * endfunc=funcs+std::size(funcs);
	const auto symlen=strlen(symbol);
	const std::pair<std::string_view,void *>  value={{symbol,symlen},nullptr};
        auto * res=std::lower_bound(funcs,endfunc,value,
[](const std::pair<std::string_view,void *> &one,const std::pair<std::string_view,void *> &two) {
		return one.first<two.first;
		});
	if(res==endfunc||memcmp(res->first.data(),symbol,symlen)) {
		auto fun=dlsym(handle,symbol);
		if(!fun||strcmp("posix_spawn",symbol)) {
			LOGGER("dlsym(%s)=%p original\n",symbol,fun);
			return fun;
			}
		LOGGER("mine posix_spawn\n");
		*((void **)&posix_spawn)=fun;
		return (void *)myposix_spawn;
		}
	LOGGER("dlsym(%s) give mine\n",symbol);
	return res->second;
 	}
#endif
#endif


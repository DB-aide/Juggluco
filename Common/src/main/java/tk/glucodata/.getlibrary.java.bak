package none.none.glucose;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.InstrumentationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import static android.os.Build.CPU_ABI;
import static android.os.Build.SUPPORTED_ABIS;

class getlibrary {
    static void log(String str) {
        System.out.println(str);
    }

public static boolean getlibrary(Context context) {
    File files = context.getFilesDir();
    if (!files.exists())
        files.mkdirs();
    File cali = new File(files, "libcalibrate.so");
    if (cali.exists())
        return true;

        PackageManager manage = context.getPackageManager();
    final String versions[] = {"2.3.0", "2.4.2", "2.5.2"};
    StringBuilder builder = new StringBuilder(37);
    builder.append("lib/");
        builder.append(CPU_ABI);
//    builder.append(SUPPORTED_ABIS[0]);
    builder.append("/libDataProcessing.so");
    String libfile = builder.toString();
    System.out.println(libfile);
    List<PackageInfo> pack = manage.getInstalledPackages(0);
    for (PackageInfo p : pack) {
        String name = p.packageName;
        if (name.startsWith("com.freestylelibre.app") && Arrays.binarySearch(versions, p.versionName) != -1) {
            log(p.packageName);
            log(p.versionName);
            ApplicationInfo app = p.applicationInfo;
            log(app.name);
            log("" + app.uid);
            log(app.sourceDir);
            log(app.nativeLibraryDir);
            if (unzipper(new File(app.sourceDir), libfile, cali))
                return true;
        }
    }
    return false;
}

static final byte end[] = {'P','K',(byte)(0xFF&0x1),(byte)(0xFF&0x2),(byte)(0xFF&0x1e),(byte)(0xFF&0x3),(byte)(0xFF&0xa),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0xee),(byte)(0xFF&0xa1),'8','R','A',(byte)(0xFF&0xe4),(byte)(0xFF&0xa9),(byte)(0xFF&0xb2),(byte)(0xFF&0xd),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0xd),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x9),(byte)(0xFF&0x0),(byte)(0xFF&0x18),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0xb4),(byte)(0xFF&0x81),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),'U','T',(byte)(0xFF&0x5),(byte)(0xFF&0x0),(byte)(0xFF&0x3),'O',(byte)(0xFF&0xc7),(byte)(0xFF&0xd),(byte)(0xFF&0x60),'u','x',(byte)(0xFF&0xb),(byte)(0xFF&0x0),(byte)(0xFF&0x1),(byte)(0xFF&0x4),(byte)(0xFF&0xe8),(byte)(0xFF&0x3),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x4),(byte)(0xFF&0xe8),(byte)(0xFF&0x3),(byte)(0xFF&0x0),(byte)(0xFF&0x0),'P','K',(byte)(0xFF&0x5),(byte)(0xFF&0x6),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x1),(byte)(0xFF&0x0),(byte)(0xFF&0x1),(byte)(0xFF&0x0),'O',(byte)(0xFF&0x0),(byte)(0xFF&0x0),(byte)(0xFF&0x0),'x','V','4',(byte)(0xFF&0x12),(byte)(0xFF&0x0),(byte)(0xFF&0x0),0};
private static boolean match(byte[] in,int off,byte[] el) {
	if(in.length<(off+el.length))
		return false;
	for(int i=0;i<el.length;i++) {
		if(in[off+i]!=el[i])
			return false;
		}
	return true;
	}
private static int max(int one,int two) {
	return one>two?one:two;
	}
private static boolean replace(byte[] in,byte[] el,byte[] repl) {
	boolean hit=false;
	int end=in.length-max(el.length,repl.length);
	for(int i=0;i<end;i++) {
		if(match(in,i,el)) {
			System.arraycopy(repl, 0, in, i, repl.length)	;
			hit=true;
			}
		}
	return hit;
	}

private static boolean unzipper(File ar, String file, File uit) {
	try( ZipFile zf = new ZipFile(ar)){
	ZipEntry entry=	zf.getEntry(file);
	int size	 = (int)entry.getSize();
	  InputStream in = zf.getInputStream(entry);
//	  int size=45056;// in.available();
	  byte[] buf= new byte[size];
//	int nam; int over=size;	
	
	for(int nam,over=size,it=0;(nam=in.read(buf,it,over))>0;it+=nam)  {
		over-=nam;
		}
	byte[] find={'l','i','b','c','.','s','o',0};
	byte[] find2={'l','i','b','l','o','g','.','s','o',0};
	byte[] repl={'l','i','b','g','.','s','o',0};
	replace(buf,find,repl);
	replace(buf,find2,repl);
	
	FileOutputStream out = new FileOutputStream(uit);
	out.write(buf);
	out.write(end);
	 out.close();
	return true;
	} 
	catch( IOException e) {
		System.err.println("Exception "+e);
		return false;
	}
	finally {
	}
	}

}

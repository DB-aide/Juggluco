package tk.glucodata;

import android.app.Application;

import static tk.glucodata.Natives.hasalarmloss;

public class GlucoseAlarms {
    final private static String LOG_ID="GlucoseAlarms";
public GlucoseAlarms(Application context) {
	Notify.init();
	}




	static final int showtime = 3 * 60 * 1000;






public	static long waitmmsec() {
		final short minutes = Natives.readalarmsuspension(4);
		final long mmsec = (minutes * 60 - 20) * 1000L;
		return mmsec;
	}

 boolean saidloss = false;
public	void handlealarm() {
		final long nu = System.currentTimeMillis();
		long wastime = MyGattCallback.oldtime - showtime;
		final long afterwait = waitmmsec() + wastime;
		boolean shouldwake = Natives.shouldwakesender();
		final long tryagain = nu + showtime;
		if(afterwait > nu) {
			Log.i(LOG_ID, "handlealarm notify");
			Notify.onenot.oldnotification(wastime);
			long nexttime = (!shouldwake || (afterwait < tryagain && hasalarmloss())) ? afterwait : tryagain;
			LossOfSensorAlarm.setalarm(Applic.app, nexttime);
		} else {
			if (shouldwake)
				LossOfSensorAlarm.setalarm(Applic.app, tryagain);
			if (!saidloss) {
				Log.i(LOG_ID, "handlealarm alarm");
				long lasttime=Natives.lastglucosetime( );
				if(lasttime!=0L)
					wastime=lasttime;
				if (hasalarmloss()) {
					Notify.onenot.lossalarm(wastime);
				}
				saidloss = true;
			}
		}
		if (shouldwake)
			Natives.wakestreamsender();
	}

	public  void sensorinit() {
		if (hasalarmloss()) {
			Notify.shownovalue();
			saidloss = false;
			final long nu = System.currentTimeMillis();
			MyGattCallback.oldtime = nu + showtime;
			LossOfSensorAlarm.setalarm(Applic.app, nu + waitmmsec());
		}
	}

public void setagealarm(final long numsec) {
		saidloss = false;
		MyGattCallback.oldtime = numsec + showtime;
		LossOfSensorAlarm.setalarm(Applic.app, MyGattCallback.oldtime);
	}



		}
